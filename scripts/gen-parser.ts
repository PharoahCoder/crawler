import childProcess from "child_process";
import path from "path";
import util from "util";
import chalk from "chalk";
import { promises as fs } from "fs";

const execAsync = util.promisify(childProcess.exec);

const DIRECTORY = "src/steps/prereqs/grammar";
const GRAMMAR_FILE = "Prerequisites.g4";
const PREPEND_TEXT = `
// Code generated by "yarn gen-parser"; DO NOT EDIT.
/* eslint-disable */
//
// Ignore this file when type-checking, see this issue for more context:
// https://github.com/tunnelvisionlabs/antlr4ts/issues/485
// @ts-nocheck

`.trimStart();

/**
 * This script re-generates the generated ANTLR classes (including lexer and
 * parser) for the ANTLR grammar in 'src/steps/prereqs/grammar/Prerequisites.g4'.
 * After re-generating the grammar, this script then adds a comment at the
 * beginning of the files that includes the '@ts-nocheck' directive, as a
 * workaround for https://github.com/tunnelvisionlabs/antlr4ts/issues/485.
 */
async function main() {
  // Get the root of the project
  const projectRoot = path.resolve(__dirname, "..");

  // Run antlr4ts to re-generate the parser/lexer
  const grammarPath = path.resolve(projectRoot, DIRECTORY, GRAMMAR_FILE);
  const genCommand = `node node_modules/.bin/antlr4ts -visitor '${grammarPath}'`;
  await execShellCommand(genCommand);

  // Add the ts-ignore comment to the top of the TypeScript files in the same directory
  const directoryPath = path.resolve(projectRoot, DIRECTORY);
  const dirEntries = await fs.readdir(directoryPath);
  const tsFiles = dirEntries.filter((filename) => filename.endsWith(".ts"));
  console.log(`Adding ts-ignore directives to ${tsFiles.length} files:`);
  for (const tsFile of tsFiles) {
    console.log(chalk.greenBright(` - ${tsFile}`));
  }
  const tsFilepaths = tsFiles.map((filename) =>
    path.resolve(directoryPath, filename)
  );
  Promise.all(
    tsFilepaths.map((filepath) => prependToFile(filepath, PREPEND_TEXT))
  );

  // Format all of the files using 'prettier'
  const formatFileArgs = tsFilepaths
    .map((filepath) => `'${filepath}'`)
    .join(" ");
  const formatCommand = `node node_modules/.bin/prettier --write ${formatFileArgs}`;
  execShellCommand(formatCommand);
}

async function execShellCommand(command: string) {
  console.log(`$ ${command}`);
  const { stdout, stderr } = await execAsync(command);
  if (stdout.length > 0) console.log(chalk.greenBright(stdout.trimEnd()));
  if (stderr.length > 0) console.log(chalk.yellowBright(stderr.trimEnd()));
}

async function prependToFile(filepath: string, prefix: string) {
  const file = await fs.open(filepath, "r+");
  const existingContents = await file.readFile();
  const prefixBuffer = Buffer.from(prefix);

  // Use method based on https://stackoverflow.com/a/17586992
  await file.write(prefixBuffer, 0, prefixBuffer.length, 0);
  await file.write(
    existingContents,
    0,
    existingContents.length,
    prefixBuffer.length
  );
}

main();
